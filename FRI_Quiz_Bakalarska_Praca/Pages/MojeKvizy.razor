@page "/mojekvizy"
@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>    
        <Div Class="list-quiz-active">
            <Heading>Vaše aktívne kvízy</Heading>
            <br />
        </Div>
        @if (liveQuizzes.Count() < 1)
        {          
            <Div>
                <Heading>Aktúalne nie sú aktívne žiadne kvízy, pre aktivovanie kvízu prosím naskenujte QR kód</Heading>
                <Button Class="btn btn-primary" Type="ButtonType.Link" To="/QRCode">QR kód sken</Button>
            </Div>
        } 
        else
        {
            <div class="list-padding">
                <Accordion Height="Height.Is50">
                @foreach (var quiz in liveQuizzes)
                {
                    <Collapse Class="mobile-width-change">
                        <CollapseHeader>
                            <Heading Size="HeadingSize.Is5">
                                    <AccordionToggle Clicked="() => NavigateToQuiz(quiz.Hash)">@quiz.QuizName </AccordionToggle>
                                    <AccordionToggle Class="disabled">Pocet bodov: @GetNumberOfCorrectAnswers(quiz.Hash).ToString("F2") / @GetNumberOfMaxPoints(quiz.Hash) </AccordionToggle>
                            </Heading>
                        </CollapseHeader>                      
                     </Collapse>
                }
                </Accordion>
            </div>
        }
        <Div Class="list-quiz-all">
            <Heading>Zoznam ostatných kvízov</Heading>
        </Div>
        <div class="footer-padding">
            <Accordion >
            @foreach (var quiz in quizzes)
            {
                <Card Width="Width.Is50" Background="Background.Transparent" Shadow="Shadow.Small">
                    <CardBody>
                        <CardTitle>@quiz.QuizName</CardTitle>
                            <CardText>Počet otázok: @quiz.Questions.Count()</CardText>
                        </CardBody>
                </Card>
            }
            </Accordion>
            <br />
        </div>
        </Authorized>

        
    <NotAuthorized>
        <Heading TextAlignment="TextAlignment.Center">
            Na zobrazenie vám priradených kvízov sa prosím prihláste.
            <br />
            <div>
                <a class="oi oi-account-login link-login" href="/login"> Prihlásiť sa</a>
            </div>
        </Heading>
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool collapseVisible = false;
    private List<Quiz> quizzes = new List<Quiz>();
    private List<Quiz> liveQuizzes = new List<Quiz>() { };
    private DateTime date = new DateTime();
    private int userId;
    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!authenticationState.Result.User.Identity.IsAuthenticated)
        {
            return;
        }
        using var dbContext = DbFactory.CreateDbContext();
        var state = await authenticationState;
        if (state.User.Identity.IsAuthenticated)
        {
            userId = int.Parse(state.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        }
        quizzes = await dbContext.Quizzes
        .Include(Quiz => Quiz.Questions)
        .ThenInclude(Question => Question.Answers)
        .ToListAsync();
        quizzes = GetLiveQuizzes();
        date = DateTime.Now;
        await base.OnInitializedAsync();
    }
    private int GetNumberOfMaxPoints(Guid guid)
    {
        int points = 0;
        foreach (var quiz in liveQuizzes)
        {
            if (quiz.Hash == guid)
            {
                points += quiz.QuestionCount;
            }
        }
        return points;
    }

    private double GetNumberOfCorrectAnswers(Guid guid)
    {
        using var dbContext = DbFactory.CreateDbContext();

        List<User_Question> user_questions = new List<User_Question>() { };
        user_questions = dbContext.UserQuestions.Include(u => u.User).Include(u => u.Question).ThenInclude(q => q.Answers).Include(u => u.CheckedAnswers).
            Where(q => q.User.Id == userId).ToList();
        Quiz selectedQuiz = null;
        double points = 0;
        foreach (var quiz in liveQuizzes)
        {
            if (quiz.Hash == guid)
            {
                selectedQuiz = quiz;
                break;
            }
        }
        User_Question selectedQuestion = null;
        foreach (var question in selectedQuiz.Questions) 
        {
            foreach (var questionUser in user_questions)
            {
                if (questionUser.Question.Hash == question.Hash)
                {
                    selectedQuestion = questionUser;
                    if (selectedQuestion == null)
                    {
                        return 0;
                    }
                    double correctAnswers = 0;
                    foreach (var answer in question.Answers)
                    {
                        if (answer.Correct)
                        {
                            correctAnswers += 1;
                        }
                    }
                    foreach (var answer in selectedQuestion.CheckedAnswers)
                    {
                        if (correctAnswers > 1)
                        {
                            if (answer.Correct)
                            {
                                points += 1 / correctAnswers;
                            } else
                            {
                                if (points == 0)
                                {
                                    points = 0;
                                } else
                                {
                                    points -= 1 / correctAnswers;
                                }
                            }                                                                                        
                        }
                        else
                        {
                            if (answer.Correct)
                            {
                                points += 1;
                            }
                            else
                            {
                                if (points == 0)
                                {
                                    points = 0;
                                }
                                else
                                {
                                    points -= 1;
                                }
                            }
                        }
                    }
                }
            }
        }

        return points;

    }

    private List<Quiz> GetLiveQuizzes()
    {
        List<Quiz> tempQuizzes = new List<Quiz>() { };
        foreach (var quiz in quizzes)
        {
            if (quiz.DateFrom <= DateTime.Now && DateTime.Now <= quiz.DateTo)
            {
                liveQuizzes.Add(quiz);
            } else
            {
                tempQuizzes.Add(quiz);
            }
        }
        return tempQuizzes;
    }
    private void NavigateToQuiz(Guid guid)
    {
        NavManager.NavigateTo($"/vyplnKviz/{guid}");
    }
}