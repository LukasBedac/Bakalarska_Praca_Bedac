@page "/liveKvizEdit/{QuizGuid:guid}"
@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<Heading>@quiz.QuizName</Heading>
<Table Border="Border.Is3">
    <TableHeader>
        <TableHeaderCell>Číslo</TableHeaderCell>
        <TableHeaderCell>Otázka</TableHeaderCell>
        <TableHeaderCell>Odpoveď | Správnosť</TableHeaderCell>
        <TableHeaderCell>Viditeľnosť</TableHeaderCell>       
        <TableHeaderCell></TableHeaderCell>
    </TableHeader>
    @foreach (var question in quiz.Questions)
    {
    <TableBody>
        <TableRow>
            <TableRowCell>@question.Order</TableRowCell>
            <TableRowCell>@((MarkupString)question.Text)</TableRowCell>
                @foreach (var answer in question.Answers)
                {
                    <TableRow>
                        <TableRowCell>@((MarkupString)answer.Text)</TableRowCell>
                        <TableRowCell TextColor="@(answer.Correct ? TextColor.Success : TextColor.Danger)">@(answer.Correct ? "Správna" : "Nesprávna")</TableRowCell>
                    </TableRow>
                }
            <TableRowCell>@((MarkupString)(question.Shown ? "Viditelný" : "Skrytý"))</TableRowCell>
            <TableRowCell>
                    <Button Color="@(question.Shown ? Color.Danger : Color.Success)" Clicked="() => ChangeVisibility(question)">@((MarkupString)(question.Shown ? "Skryť" : "Zobraziť")) </Button>
            </TableRowCell>
        </TableRow>
    </TableBody>   
    }
</Table>
<div class="footer-padding bottom-padding">
    <Button Color="Color.Primary" Clicked="@SaveChanges">Uložiť zmeny</Button>
</div>



@code {
    private Quiz quiz;

    [Parameter]
    public Guid QuizGuid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbFactory.CreateDbContext();
        quiz = dbContext.Quizzes.Include(q => q.Questions).ThenInclude(qu => qu.Answers).FirstOrDefault(q => q.Hash == QuizGuid);

    }

    private Task ChangeVisibility(Question question)
    {
        if (question == null)
        {
            return Task.CompletedTask;
        } else
        {
            question.Shown = !question.Shown;
        }

        return Task.CompletedTask;
        
    }
    private async Task SaveChanges()
    {
        using var dbContext = DbFactory.CreateDbContext();
        dbContext.Quizzes.Update(quiz);
        await dbContext.SaveChangesAsync();
        await Task.CompletedTask;
    }
}
