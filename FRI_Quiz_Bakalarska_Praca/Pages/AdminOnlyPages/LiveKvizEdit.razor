@page "/liveKvizEdit/{QuizGuid:guid}"
@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@attribute [Authorize(Roles = "Admin, Moderator")]
<Heading>@quiz.QuizName</Heading>
<Table Border="Border.Is3">
    <TableHeader>
        <TableHeaderCell>Číslo</TableHeaderCell>
        <TableHeaderCell>Otázka</TableHeaderCell>
        <TableHeaderCell>Odpoveď | Správnosť</TableHeaderCell>
        <TableHeaderCell>Viditeľnosť</TableHeaderCell>       
        <TableHeaderCell></TableHeaderCell>
    </TableHeader>
    @foreach (var question in quiz.Questions)
    {
    <TableBody>
        <TableRow>
            <TableRowCell>@question.Order</TableRowCell>
            <TableRowCell>@((MarkupString)question.Text)</TableRowCell>
                @foreach (var answer in question.Answers)
                {
                    <TableRow>
                        <TableRowCell>@((MarkupString)answer.Text)</TableRowCell>
                        <TableRowCell TextColor="@(answer.Correct ? TextColor.Success : TextColor.Danger)">@(answer.Correct ? "Správna" : "Nesprávna")</TableRowCell>
                    </TableRow>
                }
            <TableRowCell>@((MarkupString)(question.Shown ? "Viditelný" : "Skrytý"))</TableRowCell>
            <TableRowCell>
                    <Button Color="@(question.Shown ? Color.Danger : Color.Success)" Clicked="() => ChangeVisibility(question)">@((MarkupString)(question.Shown ? "Skryť" : "Zobraziť")) </Button>
            </TableRowCell>
        </TableRow>
    </TableBody>   
    }
</Table>

<div>
    <BarChart @ref="barChart" Type="ChartType.Bar" TItem="int" Clicked="@OnClicked" />
</div>


<div class="footer-padding bottom-padding">
    <Buttons>
        <Button Color="Color.Primary" Clicked="@SaveChanges">Uložiť zmeny</Button>
        <Button Color="Color.Success" Clicked="HandleRedraw">Zobraziť výsledky</Button>
    </Buttons>
</div>



@code {
    //TODO 5.1 Graf je prazdny
    private Quiz quiz;
    private List<User_Question> user_uQ = new List<User_Question>() { };
    private List<User_Question> userQuestions = new List<User_Question>() { };

    [Parameter]
    public Guid QuizGuid { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbFactory.CreateDbContext();
        quiz = dbContext.Quizzes.Include(q => q.Questions).ThenInclude(qu => qu.Answers).FirstOrDefault(q => q.Hash == QuizGuid);
        allDatas = await dbContext.UserQuestions.Include(q => q.Question).ThenInclude(q => q.Answers)
            .Include(q => q.CheckedAnswers).Include(q => q.Question.Quiz).Include(q => q.User).ToListAsync();
        var state = await authenticationState;
        int userId = int.Parse(state.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        List<User_Question> tmpUQs = new List<User_Question>();
        tmpUQs = await dbContext.UserQuestions.Include(q => q.Question).ThenInclude(q => q.Answers)
            .Include(q => q.CheckedAnswers).Include(q => q.Question.Quiz).Include(q => q.User).Where(q => q.User.Id == userId).ToListAsync();
        foreach (var uq in tmpUQs)
        {
            if (uq.Question != null)
            {
                user_uQ.Add(uq);
            }
        }
        //Odflitrovanie vyplnenych otazok k danemu kvizu
        if (user_uQ.Count() > 0)
        {
            foreach (var question in quiz.Questions)
            {
                foreach (var uq_question in user_uQ)
                {
                    if (uq_question.Question.Hash == question.Hash)
                    {
                        userQuestions.Add(uq_question);
                    }
                }
            }
            //Oznacenie doposial pridanych kvizov, ktore maju oznacene otazky - zatial su pridane len vypnene v liste
            foreach (var uQ in userQuestions)
            {
                foreach (var answer in uQ.CheckedAnswers)
                {
                    answer.isChecked = true;
                }
            }
        }
        //Nacitanie otazok z vyplnenych entit do listu
        List<Question> tmpQuestions = new List<Question>();
        foreach (var userQuestion in userQuestions)
        {
            tmpQuestions.Add(userQuestion.Question);
        }
        //kontrola ukazanych otazok - ak je zobrazena a nie je uz vyplnena, nech sa vyplni nova prazdna enntita a ukaze sa
        // otazka na vyplnenie
        foreach (var question in quiz.Questions)
        {
            if (tmpQuestions.Contains(question))
            {
                continue;
            }
            if (question.Shown)
            {

                User_Question tmpUq = new User_Question();
                tmpUq.Question = question;
                tmpUq.User = await dbContext.Users.FindAsync(userId);
                userQuestions.Add(tmpUq);
            }
        }

        List<User_Question> notAnswered = new List<User_Question>();
        foreach (var question in userQuestions)
        {
            if (!quiz.Questions.Contains(question.Question))
            {
                if (question.Question.Shown)
                {
                    User_Question tmpUq = new User_Question();
                    tmpUq.Question = question.Question;
                    tmpUq.User = await dbContext.Users.FindAsync(userId);
                    notAnswered.Add(question);
                }
            }
        }
        userQuestions.AddRange(notAnswered);
    }

    private Task ChangeVisibility(Question question)
    {
        if (question == null)
        {
            return Task.CompletedTask;
        } else
        {
            question.Shown = !question.Shown;
        }

        return Task.CompletedTask;
        
    }
    private async Task SaveChanges()
    {
        using var dbContext = DbFactory.CreateDbContext();
        dbContext.Quizzes.Update(quiz);
        await dbContext.SaveChangesAsync();
        await Task.CompletedTask;
    }

    #region Chart
    BarChart<int> barChart;
    List<User_Question> allDatas = new List<User_Question>();
    private List<BarChartDataset<int>> ChartData { get; set; }
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(54, 162, 235, 0.2f),
        ChartColor.FromRgba(255, 99, 132, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f),
        ChartColor.FromRgba(54, 162, 235, 1f) };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    private async Task HandleRedraw()
    {
        await barChart.Clear();
        List<BarChartDataset<int>> data = new List<BarChartDataset<int>>();
        data = GetBarChartDataset();
        foreach (var dataset in data)
        {
            await barChart.AddDataSet(dataset);
        }

        await barChart.AddLabels(SetLabels());
        await barChart.Update();
    }

    private List<BarChartDataset<int>> GetBarChartDataset()
    {
        var correctAnswers = SetData(1);
        var inccorectAnswers = SetData(0);
        ChartData = new List<BarChartDataset<int>>() {
        new BarChartDataset<int>()
            {
                Label = "Spravne",
                Data = correctAnswers,
                BackgroundColor = backgroundColors[0],
                BorderColor = borderColors[0],
                BorderWidth = 1
            },
        new BarChartDataset<int>()
            {
                Label = "Nespravne",
                Data = inccorectAnswers,
                BackgroundColor = backgroundColors[1],
                BorderColor = borderColors[1],
                BorderWidth = 1
            }
        };
        return ChartData;
    }

    private string[] SetLabels()
    {
        string[] labels = new string[quiz.Questions.Count()];
        for (int i = 0; i < quiz.Questions.Count(); i++)
        {
            labels[i] = "Otazka " + quiz.Questions[i].Order;
        }
        return labels;
    }


    private List<int> SetData(int type)
    {
        return LoadData(type).Result;
    }

    private async Task<List<int>> LoadData(int type)
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        List<int> data = new List<int>();
        foreach (var userUq in allDatas)
        {
            if (userUq.CheckedAnswers.Count() > 0 && userUq.Question.Quiz.Id == quiz.Id)
            {
                int i = 0;
                foreach (var answer in userUq.CheckedAnswers)
                {
                    if (answer.isChecked)
                    {
                        if (answer.Correct && type == 1)
                        {
                            ++i;
                        }
                        else if (!(answer.Correct) && type == 0)
                        {
                            ++i;
                        }
                        else
                        {

                        }
                    }
                }
                data.Add(i);
            }
        }

        return data;
    }

    Task OnClicked(ChartMouseEventArgs e)
    {
        var model = e.Model as BarChartModel;

        Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
        return Task.CompletedTask;
    }


    #endregion Chart
}
