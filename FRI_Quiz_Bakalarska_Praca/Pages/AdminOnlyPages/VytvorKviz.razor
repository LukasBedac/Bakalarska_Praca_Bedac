@page "/vytvorKviz/{id:int?}"
@using FRI_Quiz_Bakalarska_Praca.Data
@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using TinyMCE.Blazor;
@inject AuthenticationStateProvider AuthProvider
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<User> Usermanager
<PageTitle>Vytvorenie Kvizu</PageTitle>

<div>
    <div class="left_side_quiz">
        <Validations @ref="quizValidation" Mode="ValidationMode.Auto" ValidateOnLoad="true">
            <EditForm id="QuizId" Model="@newQuiz" OnValidSubmit="SubmitQuiz">
                <div class="mb-3">
                    <label class="form-label">Vyberte si typ kvizu:</label>      
                    <br />
                    <div class="form-check">
                        <input type="radio" class="form-check-input livekviz" name="flexRadioDefault" id="livekviz" @onclick="ToggleDisplay" checked="@isLiveKviz" />
                        <label for="livekviz" class="form-check-label pdright-2rem">Live Kvíz</label>
                        <input type="radio" class="form-check-input" name="flexRadioDefault" id="normalkviz" @onclick="ToggleDisplay" checked="@(!isLiveKviz)" />
                        <label for="normalkviz" class="form-check-label">Kvíz</label>
                    </div>
                </div>
                <div class="users">
                    <label class="form-label users-label">Pridat uzivatela: </label>
                    <Autocomplete TItem="User"
                                  TValue="string"
                                  Data="@users"
                                  TextField="@(( item ) => item.Email)"
                                  ValueField="@(( item ) => item.Email)"
                                  @bind-SelectedValues="@SelectedSearchValue"
                                  @bind-SelectedTexts="SelectedAutoCompleteText"
                                  SelectionMode="AutocompleteSelectionMode.Multiple"
                                  Placeholder="Hladaj..."
                                  Filter="AutocompleteFilter.Contains"
                                  FreeTyping
                                  CustomFilter="@(( item, searchValue ) => item.Email.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                         <NotFoundContent Context="ATcontext"> Prepáčte... @ATcontext nebol nájdený! :( </NotFoundContent>
                     </Autocomplete>
                     <br/>
                     <Field Horizontal>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            Hladané: @string.Join(',', SelectedSearchValue)
                        </FieldBody>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            Označené: @(SelectedAutoCompleteText == null ? null : string.Join(',', SelectedAutoCompleteText))
                    </FieldBody>
                </Field>
                </div>
                <div class="nastaveniaCasu">
                    <div class="datum">
                        <label class="nastaveniaCasuText">Dátum pre kvíz:</label>
                        <Addons>         
                            <Addon AddonType="AddonType.Body">
                                <DatePicker @bind-Dates="@dates" @ref="@datePicker" Date="null" Min="DateTime.Now"
                                SelectionMode="DateInputSelectionMode.Range" DisplayFormat="j/n/Y" Placeholder="DD/MM/YYYY" />
                            </Addon>                                                                                 
                        </Addons>
                    </div>
                </div>
                <div class="nastaveniaCasu">
                    <div class="casOd">
                        <label class="nastaveniaCasuText">Zaciatok: </label>
                        <Addons>
                            <Validation Validator="ValidationRule.IsSelected">
                                <Addon AddonType="AddonType.Body">
                                    <TimeEdit @bind-Time="@timeFrom" @ref="@timePicker" Min="DateTime.Now.TimeOfDay" TValue="TimeSpan?" />     
                                </Addon>
                            <ValidationError>Musíte zadať čas</ValidationError>
                            </Validation>
                        </Addons>
                    </div>
                    <div class="casDo">
                        <label class="nastaveniaCasuText">Koniec: </label>
                        <Addons>                            
                            <Addon AddonType="AddonType.Body">
                                <TimeEdit @bind-Time="@timeTo" @ref="@timePicker" Min="@timeFrom" TValue="TimeSpan?" />  
                            </Addon>                               
                        </Addons>  
                    </div>    
                </div>
                
                <div class="mb-3">
                    <label class="nazov-label">Nazov kvízu</label>                      
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <TextEdit @bind-Text="newQuiz.QuizName" class="form-label" ></TextEdit>
                        <ValidationError>Nezadali ste názov kvízu</ValidationError>
                    </Validation>               
                </div>
            </EditForm>
        </Validations>
    </div>
    <div class="rigt_side_quiz">
        <Table Hoverable>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Meno</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var user in SelectedAutoCompleteText)
                {
                    <TableRow>
                        <TableRowCell>@user</TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
        <Table Hoverable FixedHeader>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Otazka</TableHeaderCell>
                    <TableHeaderCell>Text</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var question in questions)
                {
                <TableRow>
                    <TableRowHeader>#@question.Order</TableRowHeader>
                        <TableRowCell>@(question.Text.Length > 20 ? ((MarkupString)question.Text.Substring(0, 20) + "...") : ((MarkupString)question.Text))</TableRowCell>
                    <TableRowCell><Button Class="btn-secondary">Edit</Button></TableRowCell>
                </TableRow>
                }        
            </TableBody>
        </Table>
       
    </div>
    <div class="left-side-quiz">
        <EditForm id="QuestionForm" Model="@questions" OnValidSubmit="SubmitQuestion">
            @foreach (var question in questions) 
                {
                <div class="mb-3">
                    <label class="form-label">Otázka</label>
                    <Editor @bind-Value="question.Text" Field="@(() => question.Text)" Conf="@textConf"></Editor>
                </div>
                <div>
                    <button type="submit" class="btn btn-danger" @onclick="() => DeleteQuestion(question)">Odstrániť otázku</button>
                </div>
                <div class="odpovede-container">
                    <label>Zadajte odpovede</label>
                    @foreach (var answer in question.Answers)
                    {
                    <div class="odpoved">
                        <label class="form-check-label"></label>
                            <Editor @bind-Value="answer.Text" Field="(() => answer.Text)" Conf="@odpovedeConf"></Editor>
                        <div>
                            <label class="odpoved-label">Spravna</label>
                            <input @bind="answer.Correct" type="checkbox" class="form-check odpoved-checkbox" />
                        </div>
                    </div>                    
                    }
                    <div>
                        <br />
                        <button type="submit" class="btn btn-success" @onclick="() => AddAnswer(question)" disabled="@AnswersMaxCount(question)">Pridať odpoveď</button>
                        @if (question.Answers.Count < 2)
                        { } else
                        {
                            <button type="submit" class="btn btn-danger" @onclick="() => DeleteAnswer(question)">Odstrániť odpoveď</button>
                        }
                        @if (@AnswersMaxCount(question))
                        {
                            <label class="max-answers-color">Nie je možné pridať viac odpovedí</label>
                        }
                    </div>
                </div>
            }                   
        </EditForm>
    </div>
    <div class="buttons_group_quiz">        
        <button type="submit" form="QuizId" class="btn btn-primary">@(!OnceSubmit ? "Pridať kvíz" : "Update kvízu")</button>
        <button type="submit" class="btn btn-success" @onclick="AddQuestion">Pridať otázku</button>
        <!--<button type="reset" class="btn btn-danger" @onclick="ResetForm">Nový kvíz</button>-->
    </div>
</div>

@code {
    #region Fields 
    private Quiz newQuiz = new Quiz();
    private List<Question> questions = new List<Question>();
    private bool isLiveKviz = true;
    private IReadOnlyList<DateTime?> dates = new List<DateTime?>() { };
    private TimeSpan? timeFrom = TimeSpan.Zero;
    private TimeSpan? timeTo = new TimeSpan(23, 59, 0);
    private DatePicker<DateTime?>? datePicker;
    private TimeEdit<TimeSpan?>? timePicker;
    private Validations? quizValidation;
    private User user;
    public IEnumerable<User> users;
    public List<string?> SelectedSearchValue { get; set; } = new List<string?>() { };
    public List<string?> SelectedAutoCompleteText { get; set; } = new List<string?>() { };
    private bool OnceSubmit = false;
    //Tento parameter sluzi na URL datove presmerovanie
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    #endregion Fields

    #region HelpMethods

    //TODO 2.1 - Autocomplete na uzivatelov z uniza.sk domeny - doplnanie uzivatelov podla zadavaneho emailu 
    //              Pravdepodone autocomplete staci aby ukazal meno, nie email - dohoda
    private bool SetDates()
    {
        if (dates.Count < 1 ||  dates[0] == null || timeFrom == null)
        {
            return false;
        } else
        {
            newQuiz.DateFrom = dates[0] + timeFrom;
            if (dates.Count < 2)
            {
                if (timeTo == null)
                {
                    timeTo = DateTime.Today.AddTicks(TimeSpan.TicksPerDay - 1).TimeOfDay;
                }
                newQuiz.DateTo = dates[0] + timeTo;
            }
            else
            {
                if (timeTo == null)
                {
                    timeTo = dates[1].Value.AddTicks(TimeSpan.TicksPerDay - 1).TimeOfDay;
                }
                newQuiz.DateTo = dates[1] + timeTo;
            }
            return true;
        }
    }

    private bool AnswersMaxCount(Question question)
    {
        return question.Answers.Count >= 6 ? true : false;
    }

    private void ToggleDisplay()
    {
        isLiveKviz = !isLiveKviz;
    }

    protected async override Task OnInitializedAsync()
    {
        using var dbContext = DbFactory.CreateDbContext();
        users = await dbContext.Users.ToListAsync();
        if (Id != null)
        {
            Quiz quiz = await dbContext.Quizzes
            .Include(q => q.Questions)
            .ThenInclude(qu => qu.Answers)
            .FirstOrDefaultAsync(q => q.Id == Id);
            newQuiz = quiz;
            questions = quiz.Questions;
            dates = new List<DateTime?>() { quiz.DateFrom, quiz.DateTo };
            timeFrom = quiz.DateFrom.Value.TimeOfDay;
            timeTo = quiz.DateTo.Value.TimeOfDay;
            OnceSubmit = true;
        } else
        {
            if (authenticationState is not null)
            {

                /*newQuiz.User = owner;
                * 
                var state = await authenticationState;
                var user = state.User;

                //user.FindFirst(ClaimNames); - z tohto ID usera
                var users = await dbContext.Users.ToListAsync();

                foreach (var userFromDb in users)
                    {
                    if (userFromDb.Email.Equals(user.Identity.Name))
                        {
                        newQuiz.User = userFromDb;
                }
                }*/

            }
            AddQuestion();
            AddAnswer(questions[0]);
        }
    }
    /*private void ResetForm()
    {
    newQuiz = new Quiz();
    questions = new List<Question>() { };
    AddQuestion();
    dates = new List<DateTime?>();
    timeFrom = null;
    timeTo = null;
    datePicker = null;
    timePicker = null;
    OnceSubmit = false;
    questions[0].Order = 1;
    AddAnswer(questions[0]);
    }
    */
    #endregion HelpMethods

    #region QuizMethods
    private async Task SubmitQuiz()
    {
        using var dbContext = DbFactory.CreateDbContext();
        if (Id != null)
        {
            dbContext.Quizzes.Update(newQuiz);
            await dbContext.SaveChangesAsync();
            return;
        }
        if (!SetDates())
        {
            return;
        } 
        if (isLiveKviz)
        {
            newQuiz.Type = TypKvizu.livekviz;
        }
        else
        {
            newQuiz.Type = TypKvizu.kviz;
        }
        if (!OnceSubmit)
        {
            var state = await authenticationState;
            var ownerId = int.Parse(state.User.FindFirst(ClaimTypes.NameIdentifier).Value);
            var owner = await dbContext.Users.FindAsync(ownerId);
            dbContext.Users.Attach(owner);
            AddModerators();
            newQuiz.User = owner;
            SubmitQuestion();                       
            dbContext.Quizzes.Attach(newQuiz);
            OnceSubmit = true;
            await dbContext.SaveChangesAsync();
        } else
        {
            SubmitQuestion();
            dbContext.Quizzes.Update(newQuiz);
            await dbContext.SaveChangesAsync();
        }
    }
    private void AddModerators()
    {
        for (int i = 0; i < SelectedAutoCompleteText.Count(); i++)
        {
            
        }
    }

    #endregion QuizMethods

    #region QuestionMethods

    private void AddQuestion() {        

        Question tempQuestion = new Question();
        tempQuestion.Order = questions.Count + 1;
        questions.Add(tempQuestion);
    }

    private void SubmitQuestion()
    {
        {
            foreach (var question in questions)
            {                   
                question.QuizRef = newQuiz;
                newQuiz.Questions.Add(question);           
            }
        } 
    }
    private void DeleteQuestion(Question question)
    {
        question.Answers.Clear();
        questions.Remove(question);
    }

    #endregion QuestionMethods
    #region AnswerMethods

    private void AddAnswer(Question question)
    {
        Answer tempAnswer = new Answer();
        tempAnswer.Question = question;
        tempAnswer.Order = question.Answers.Count + 1;
        question.Answers.Add(tempAnswer);
        
    }

    private void DeleteAnswer(Question question)
    {        
        if (question.Answers.Count - 1 < 1)
        {
            return;
        } else
        {
            question.Answers.RemoveAt(question.Answers.Count - 1);  
        }
    }

    #endregion AnswerMethods

    #region TinyMCE
    private Dictionary<string, object> odpovedeConf = new Dictionary<string, object>{
        {"plugins", "autolink media link image emoticons table"},
        {"menubar", false },
        {"toolbar", "undo redo | styles | bold italic underline | table | link image paste "},
        {"paste_data_images", "true"},
        {"height", "250px"},
        {"automatic_uploads", true },
        {"images_upload_url", "/Image"}
    };

    private Dictionary<string, object> textConf = new Dictionary<string, object>{
        {"menubar", false },
        {"plugins", "autolink media link image emoticons table"},
        {"toolbar", "undo redo | styles | bold italic underline | table link image "},
        {"paste_data_images", "true"},     
        {"width", "60%"},
        {"height", "200px"},
        {"automatic_uploads", true },
        {"images_upload_url", "/Image"}
    };
    #endregion TinyMCE

}
