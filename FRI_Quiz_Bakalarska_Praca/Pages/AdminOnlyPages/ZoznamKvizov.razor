@page "/zoznamkvizov"

@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin, Moderator")]

<DataGrid TItem="Quiz"
          Data="@quizzes"
          @bind-SelectedRow="@selectedQuiz"
          Editable
          Responsive
          ShowPager          
          Filterable
          FilterMethod="DataGridFilterMethod.Contains"
           CommandMode="DataGridCommandMode.ButtonRow">
     <DataGridColumns >
         <DataGridColumn Field="@nameof(Quiz.QuizName)" Caption="Názov" />
         <DataGridColumn Field="@nameof(Quiz.Moderators)" DisplayFormat="" Caption="Moderátori" />
         <DataGridDateColumn Field="@nameof(Quiz.DateFrom)" Caption="Začiatok" />
         <DataGridDateColumn Field="@nameof(Quiz.DateTo)" Caption="Koniec" />
         <DataGridColumn Field="@nameof(Quiz.Type)" Caption="Typ" />
         <DataGridNumericColumn Field="@nameof(Quiz.NumberOfUsers)" Caption="Počet účástníkov" Filterable="false" />
         <DataGridNumericColumn Field="@nameof(Quiz.QuestionCount)" Caption="Počet otázok" Filterable="false" />
    </DataGridColumns>
     <ButtonRowTemplate>
         <Button Color="Color.Primary" Disabled="(selectedQuiz.Id == 0)" Clicked="() => EditQuiz(selectedQuiz.Hash)">Edit</Button>
         <Button Color="Color.Danger" Disabled="(selectedQuiz.Id == 0)" Clicked="() => ShowModal(selectedQuiz.Hash)">Delete</Button>
         @if (selectedQuiz.Id != 0 && selectedQuiz.Type == TypKvizu.livekviz)
        {
            <Button Color="Color.Secondary" Clicked="() => EditLiveQuiz(selectedQuiz.Hash)">Spravovať livekvíz</Button>
        }    
     </ButtonRowTemplate>
</DataGrid>
<div class="down-padding">

</div>
 <Modal @ref="@modalRef" Closing="@OnModalClosing">
     <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Potvrdenie vymazania</ModalTitle>
        </ModalHeader>
        <ModalBody>
            Naozaj chcete vymazat kvíz?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@CloseModal">Áno, vymazať</Button>
            <Button Color="Color.Secondary" Clicked="@TryCloseModal">Nie, ponechať</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
 @code {
    public Quiz? Quiz { get; set; }
    private List<Quiz> quizzes = new List<Quiz>();
    List<User_Question> user_Questions = new List<User_Question>();
    private Quiz selectedQuiz = new Quiz();
    private Modal modalRef;
    private bool cancelClose;

    private Task ShowModal(Guid guid)
    {
        if (guid == Guid.Empty)
        {
            return modalRef.Hide();
        }
        return modalRef.Show();
    }

    private async Task CloseModal()
    {
        cancelClose = false;
        await DeleteQuiz(selectedQuiz.Hash);
        await modalRef.Hide();
    }

    private Task TryCloseModal()
    {
        cancelClose = false;

        return modalRef.Hide();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {

        e.Cancel = cancelClose || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbFactory.CreateDbContext();
        quizzes = await dbContext.Quizzes
        .Include(Kvizy => Kvizy.Questions)
        .ThenInclude(Otazky => Otazky.Answers)
        .ToListAsync();       
        user_Questions = await dbContext.UserQuestions.Include(q => q.Question.Quiz).Include(q => q.User).ToListAsync();
        foreach (var quiz in quizzes)
        {
            quiz.NumberOfUsers = UsersCount(quiz.Hash);
        }
        await base.OnInitializedAsync();
    }

    private async Task Refresh()
    {
        using var dbContext = DbFactory.CreateDbContext();
        quizzes = await dbContext.Quizzes
        .Include(Kvizy => Kvizy.Questions)
        .ThenInclude(Otazky => Otazky.Answers)
        .ToListAsync();
        StateHasChanged();
    } 
    private Task EditQuiz(Guid guid)
    {
        if (guid == Guid.Empty)
        {
            return Task.CompletedTask;
        } else
        {
            NavigationManager.NavigateTo($"/vytvorKviz/{guid}");
            return Task.CompletedTask;
        }
    }

    private async Task DeleteQuiz(Guid guid)
    {
        if (guid == Guid.Empty)
        {
            return;
        } else
        {
            using var dbContext = await DbFactory.CreateDbContextAsync();
            Quiz quiz = dbContext.Quizzes.Include(q => q.Questions).ThenInclude(qu => qu.Answers).First(q => q.Hash == guid);
            foreach (Question question in quiz.Questions)
            {
                foreach (Answer answer in question.Answers)
                {
                    dbContext.Answers.Remove(answer);
                }
                dbContext.Questions.Remove(question);
            }
            dbContext.Quizzes.Remove(quiz);
            await dbContext.SaveChangesAsync();
            await Refresh();
        }
    }

    private Task EditLiveQuiz(Guid guid)
    {
        NavigationManager.NavigateTo($"/liveKvizEdit/{guid}");
        return Task.CompletedTask;
    }

    private int UsersCount(Guid guid)
    {
        int count = 0;
        List<string> users = new List<string>();
        foreach (var uQ in user_Questions)
        {
            if (uQ.Question.Quiz.Hash == guid)
            {
                if (users.Count() == 0 || !users.Contains(uQ.User.UserName))
                {
                    users.Add(uQ.User.UserName);
                }
            }           
        }      
        return users.Count();
    }
}

