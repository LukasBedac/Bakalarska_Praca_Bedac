@page "/nastaveniaUzivatelov"
@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
<h3>Nastavenia uživateľov</h3>
<Table Hoverable>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>Email</TableHeaderCell>
            <TableHeaderCell>Rola</TableHeaderCell>
            <TableHeaderCell TextAlignment="TextAlignment.Center">Editácia</TableHeaderCell>
            
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var user in users)
        {
            <TableRow>
                <TableRowHeader>@user.Id</TableRowHeader>
                <TableRowCell>@user.Email</TableRowCell>
                <TableRowCell>@GetRole(user).Result</TableRowCell>
                    <TableRowCell TextAlignment="TextAlignment.Center">
                        <Button Type="ButtonType.Button" Color="Color.Success" Clicked="() => ShowChangeModal(user)">Zmeň rolu</Button>
                        <Button Type="ButtonType.Button" Color="Color.Danger" Clicked="() => ShowDeleteModal(user)">Odstrániť uživateľa</Button>
                    </TableRowCell>
                <TableRowCell></TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>
<Modal @ref="@changeModal" Closing="@OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Zmena role uživateľa</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Label>Tu môžete zmeniť rolu uživateľovi.</Label>
            <Buttons Border="Border.Rounded">
                <Button Type="ButtonType.Submit" Color="Color.Dark" Outline Clicked="() => SetRole(1)" >Admin</Button>
                 <Button Type="ButtonType.Submit" Color="Color.Dark" Outline Clicked="() => SetRole(2)">Moderátor</Button>
                 <Button Type="ButtonType.Submit" Color="Color.Dark" Outline Clicked="() => SetRole(0)">Zrušiť rolu</Button>
            </Buttons>
            <br />
            <Label>Zvolená rola: @this.role</Label>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="() => CloseChangeModal()">Aplikovať rolu</Button>
                <Button Color="Color.Secondary" Clicked="@TryCloseChangeModal">Zavrieť</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="@deleteModal" Closing="@OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Potvrdenie vymazania</ModalTitle>
        </ModalHeader>
        <ModalBody>
            Naozaj chcete vymazat uživateľa?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="() => CloseDeleteModal(selectedUser)">Áno, vymazať</Button>
            <Button Color="Color.Secondary" Clicked="@TryCloseDeleteModal">Ponechať uživateľa</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

 
@code {
    private List<User> users = new List<User>();
    private List<IdentityUserRole<int>> roles = new List<IdentityUserRole<int>>();
    private User selectedUser;
    private Modal deleteModal;
    private Modal changeModal;
    private string role;
    private bool cancelClose;
    protected override Task OnInitializedAsync()
    {
        return LoadUsers();
    }

    private async Task LoadUsers()
    {
        using var DbContext = DbFactory.CreateDbContext();
        users = await DbContext.Users.ToListAsync();
        StateHasChanged();
    }

    private async Task DeleteUser(User user)
    {
        using var DbContext = DbFactory.CreateDbContext();
        DbContext.Users.Remove(user);
        await DbContext.SaveChangesAsync();
        await LoadUsers();
    }
    private async Task ChangeRole()
    {
        using var dbContext = DbFactory.CreateDbContext();
        IdentityUserRole<int> dbUserRole = await dbContext.UserRoles.FirstOrDefaultAsync(ur => ur.UserId == selectedUser.Id);
        IdentityRole<int> dbRole = new IdentityRole<int>();
        if (dbUserRole == null)
        {
            if (role == "")
            {
                return;
            }
            dbUserRole = new IdentityUserRole<int>();
            dbUserRole.UserId = selectedUser.Id;
            dbUserRole.RoleId = (dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == role)).Id;
            dbContext.UserRoles.Add(dbUserRole);
            await dbContext.SaveChangesAsync();
            return;
        } else
        {
            if (role == "") 
            {
                dbContext.UserRoles.Remove(dbUserRole);
                await dbContext.SaveChangesAsync();
                return;
            }
            dbUserRole.RoleId = (dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == role)).Id ;
            await dbContext.SaveChangesAsync();
            dbContext.UserRoles.Update(dbUserRole);
        }
    }

    //TODO 2.6 Vyvtorit filter na mena

    private void Filter()
    {

    }

    private Task ShowDeleteModal(User user)
    {
        if (user == null)
        {
            return deleteModal.Hide();
        }
        selectedUser = user;
        return deleteModal.Show();
    }

    private Task ShowChangeModal(User user)
    {
        selectedUser = user;
        return changeModal.Show();
    }

    private async Task CloseDeleteModal(User user)
    {
        cancelClose = false;
        await DeleteUser(user);
        await deleteModal.Hide();
    }

    private async Task CloseChangeModal()
    {
        cancelClose = false;
        await ChangeRole();
        await changeModal.Hide();
    }

    private Task TryCloseDeleteModal()
    {
        cancelClose = false;
        return deleteModal.Hide();
    }
    private Task TryCloseChangeModal()
    {
        cancelClose = false;
        return changeModal.Hide();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {

        e.Cancel = cancelClose || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;
    }

    private async Task SetRole(int elementId)
    {
        if (elementId == 0)
        {
            this.role = "";
        }
        else if (elementId == 1)
        {
            this.role = "Admin";
        } else
        {
            this.role = "Moderator";
        }
        await Task.CompletedTask;
    }

    private async Task<string> GetRole(User user)
    {
        using var dbContext = DbFactory.CreateDbContext();

        IdentityRole<int> role = dbContext.UserRoles
                            .Where(ur => ur.UserId == user.Id)
                            .Join(dbContext.Roles, ur => ur.RoleId, r => r.Id, (ur, r) => r)
                            .FirstOrDefault();
        if (role == null)
        {
            return "";
        } else
        {
            return role.Name;
        }
    }
}
