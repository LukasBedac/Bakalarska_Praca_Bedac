@page "/nastaveniaUzivatelov"
@using FRI_Quiz_Bakalarska_Praca.Data.Database
@using FRI_Quiz_Bakalarska_Praca.Data.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@attribute [Authorize(Roles = "Admin, Moderator")]
<h3>Nastavenia uživateľov</h3>

<div class="d-inline-flex">
    <!--KeyDown="() => Filter(filter)" => funguje po stlaceni tlacitka ako filter -->
    <TextEdit Border="Border.Secondary" @bind-Text="@filter" Placeholder="meno..."></TextEdit>
</div>
<div class="d-inline-flex">
    <Button Color="Color.Primary" Type="ButtonType.Submit" Clicked="() => Filter(filter)">Vyhľadajte používateľa</Button>
<Button Color="Color.Secondary" Clicked="ClearFilter">Vymazať filter</Button>
</div>
<Table Hoverable>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>Email</TableHeaderCell>
            <TableHeaderCell>Rola</TableHeaderCell>
            <TableHeaderCell TextAlignment="TextAlignment.Center">Editácia</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @{         
            if (filteredUsers.Count() < 1)
            {
                for (var i = 0; i < users.Count() / pageItems; i++)
                {
                    var user = users[i];
                    <TableRow>
                        <TableRowCell>@user.Email</TableRowCell>
                        <TableRowCell>@GetRole(user).Result</TableRowCell>
                        <TableRowCell TextAlignment="TextAlignment.Center">
                            <Button Type="ButtonType.Button" Color="Color.Success" Clicked="() => ShowChangeModal(user)">Zmeň rolu</Button>
                            <Button Type="ButtonType.Button" Color="Color.Danger" Clicked="() => ShowDeleteModal(user)">Odstrániť uživateľa</Button>
                        </TableRowCell>
                    </TableRow>
                }
            } else
            {
                for (var i = 0; i < filteredUsers.Count() / pageItems; i++)
                {
                    var user = filteredUsers[i];
                    <TableRow>
                        <TableRowCell>@user.Email</TableRowCell>
                        <TableRowCell>@GetRole(user).Result</TableRowCell>
                        <TableRowCell TextAlignment="TextAlignment.Center">
                            <Button Type="ButtonType.Button" Color="Color.Success" Clicked="() => ShowChangeModal(user)">Zmeň rolu</Button>
                            <Button Type="ButtonType.Button" Color="Color.Danger" Clicked="() => ShowDeleteModal(user)">Odstrániť uživateľa</Button>
                        </TableRowCell>
                    </TableRow>
                }
            }

        }
    </TableBody>
</Table>
<Pagination>
    <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
        <PaginationLink>
            <span aria-hidden="true">«</span>
        </PaginationLink>
    </PaginationItem>
    @{
        for (var i = 1; i <= pageItems; i++)
        {
            var pageNumberAsString = i.ToString();
            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                    @pageNumberAsString
                </PaginationLink>
            </PaginationItem>
        }
    }
    <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
        <PaginationLink>
            <span aria-hidden="true">»</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

<Modal @ref="@changeModal" Closing="@OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Zmena role uživateľa</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Label>Tu môžete zmeniť rolu uživateľovi.</Label>
            <Buttons Border="Border.Rounded">
                <Button Type="ButtonType.Submit" Color="Color.Dark" Outline Clicked="() => SetRole(1)" >Admin</Button>
                 <Button Type="ButtonType.Submit" Color="Color.Dark" Outline Clicked="() => SetRole(2)">Moderátor</Button>
                 <Button Type="ButtonType.Submit" Color="Color.Dark" Outline Clicked="() => SetRole(0)">Zrušiť rolu</Button>
            </Buttons>
            <br />
            <Label>Zvolená rola: @this.role</Label>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="() => CloseChangeModal()">Aplikovať rolu</Button>
                <Button Color="Color.Secondary" Clicked="@TryCloseChangeModal">Zavrieť</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="@deleteModal" Closing="@OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Potvrdenie vymazania</ModalTitle>
        </ModalHeader>
        <ModalBody>
            Naozaj chcete vymazat uživateľa?
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="() => CloseDeleteModal(selectedUser)">Áno, vymazať</Button>
            <Button Color="Color.Secondary" Clicked="@TryCloseDeleteModal">Ponechať uživateľa</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<div class="footer-padding">

</div>

 
@code {
    private List<User> users = new List<User>();
    private List<IdentityUserRole<int>> roles = new List<IdentityUserRole<int>>();
    private User selectedUser;
    private Modal deleteModal;
    private Modal changeModal;
    private string role;
    private bool cancelClose;
    private string filter;
    private List<User> filteredUsers = new List<User>();
    protected override Task OnInitializedAsync()
    {
        return LoadUsers();
    }

    private async Task LoadUsers()
    {
        using var DbContext = DbFactory.CreateDbContext();
        users = await DbContext.Users.ToListAsync();
        pageItems = users.Count() % 10 == 0 ? ++pageItems : pageItems;

        StateHasChanged();
    }

    private async Task DeleteUser(User user)
    {
        using var DbContext = DbFactory.CreateDbContext();
        DbContext.Users.Remove(user);
        await DbContext.SaveChangesAsync();
        await LoadUsers();
    }
    private async Task ChangeRole()
    {
        using var dbContext = DbFactory.CreateDbContext();
        IdentityUserRole<int> dbUserRole = await dbContext.UserRoles.FirstOrDefaultAsync(ur => ur.UserId == selectedUser.Id);
        IdentityRole<int> dbRole = new IdentityRole<int>();
        if (dbUserRole == null)
        {
            if (role == "" || role == null)
            {
                return;
            }
            dbUserRole = new IdentityUserRole<int>();
            dbUserRole.UserId = selectedUser.Id;
            dbUserRole.RoleId = (dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == role)).Id;
            dbContext.UserRoles.Add(dbUserRole);
            await dbContext.SaveChangesAsync();
            return;
        } else
        {
            if (role == null)
            {
                return;
            }
            if (role == "")
            {
                dbContext.UserRoles.Remove(dbUserRole);
                await dbContext.SaveChangesAsync();
                return;
            }
            dbUserRole.RoleId = (dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == role)).Id ;
            await dbContext.SaveChangesAsync();
            dbContext.UserRoles.Update(dbUserRole);
        }
    }

    private void Filter(string filter)
    {
        filteredUsers.Clear();
        if (filter == null || filter == "")
        {
            return;
        } else
        {
            foreach (User user in users)
            {
                if (user.Email.Contains(filter))
                {
                    filteredUsers.Add(user);
                }
            }
            StateHasChanged();
        }
    }
    private void ClearFilter()
    {
        filteredUsers.Clear();
        filter = "";        
    }

    private Task ShowDeleteModal(User user)
    {
        if (user == null)
        {
            return deleteModal.Hide();
        }
        selectedUser = user;
        return deleteModal.Show();
    }

    private Task ShowChangeModal(User user)
    {
        selectedUser = user;
        return changeModal.Show();
    }

    private async Task CloseDeleteModal(User user)
    {
        cancelClose = false;
        await DeleteUser(user);
        await deleteModal.Hide();
    }

    private async Task CloseChangeModal()
    {
        cancelClose = false;
        await ChangeRole();
        await changeModal.Hide();
    } 

    private Task TryCloseDeleteModal()
    {
        cancelClose = false;
        return deleteModal.Hide();
    }
    private Task TryCloseChangeModal()
    {
        cancelClose = false;
        return changeModal.Hide();
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {

        e.Cancel = cancelClose || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;
    }

    private async Task SetRole(int elementId)
    {
        if (elementId == 0)
        {
            this.role = "";
        }
        else if (elementId == 1)
        {
            this.role = "Admin";
        } else
        {
            this.role = "Moderator";
        }
        await Task.CompletedTask;
    }

    private async Task<string> GetRole(User user)
    {
        using var dbContext = DbFactory.CreateDbContext();

        IdentityRole<int> role = dbContext.UserRoles
                            .Where(ur => ur.UserId == user.Id)
                            .Join(dbContext.Roles, ur => ur.RoleId, r => r.Id, (ur, r) => r)
                            .FirstOrDefault();
        if (role == null)
        {
            return "";
        } else
        {
            return role.Name;
        }
    }

    #region Pagination

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";
    private int pageItems = 1;

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
    }

    private void SetActive(string page)
        => currentPage = page;

    #endregion Pagination
}
